#include <cryptopp/aes.h>
#include <cryptopp/filters.h>
#include <cryptopp/modes.h>
#include <cryptopp/files.h>
#include <cryptopp/osrng.h>
#include <cryptopp/hex.h>
#include <iostream>
#include <fstream>

using namespace CryptoPP;

//XOR ENCRIPTATION
/*void XORProcess(const byte* input, byte* output, size_t size, const byte* key, size_t keySize) {
    for (size_t i = 0; i < size; ++i) {
        output[i] = input[i] ^ key[i % keySize];
    }
}

void EncryptFileXOR(const string& filename, const string& encryptedFilename, const byte* key, size_t keySize) {
    ifstream inFile(filename, ios::binary);
    ofstream outFile(encryptedFilename, ios::binary);

    vector<byte> buffer(1024);
    vector<byte> encryptedBuffer(1024);

    while (inFile.read(reinterpret_cast<char*>(buffer.data()), buffer.size())) {
        size_t bytesRead = inFile.gcount();
        XORProcess(buffer.data(), encryptedBuffer.data(), bytesRead, key, keySize);
        outFile.write(reinterpret_cast<char*>(encryptedBuffer.data()), bytesRead);
    }
}

void DecryptFileXOR(const string& encryptedFilename, const string& decryptedFilename, const byte* key, size_t keySize) {
    EncryptFileXOR(encryptedFilename, decryptedFilename, key, keySize);
}*/

//AES ENCRYPTATION
void EncryptFileAES(const std::string& filename, const std::string& encryptedFilename, const byte key[AES::DEFAULT_KEYLENGTH], const byte iv[AES::BLOCKSIZE]) {
    CBC_Mode<AES>::Encryption encryption;
    encryption.SetKeyWithIV(key, AES::DEFAULT_KEYLENGTH, iv);

    FileSource fs(
        filename.c_str(),
        true,
        new StreamTransformationFilter(
            encryption,
            new FileSink(encryptedFilename.c_str())
        )
    );
}

void DecryptFileAES(const std::string& encryptedFilename, const std::string& decryptedFilename, const byte key[AES::DEFAULT_KEYLENGTH], const byte iv[AES::BLOCKSIZE]) {
    CBC_Mode<AES>::Decryption decryption;
    decryption.SetKeyWithIV(key, AES::DEFAULT_KEYLENGTH, iv);

    FileSource fs(
        encryptedFilename.c_str(),
        true,
        new StreamTransformationFilter(
            decryption,
            new FileSink(decryptedFilename.c_str())
        )
    );
}

void ProcessEncryptionAES(const std::string& filename, const std::string& encryptedFilename, const std::string& decryptedFilename) {
    AutoSeededRandomPool rnd;

    byte key[AES::DEFAULT_KEYLENGTH];
    rnd.GenerateBlock(key, sizeof(key));

    byte iv[AES::BLOCKSIZE];
    rnd.GenerateBlock(iv, sizeof(iv));

    std::string hexKey, hexIV;
    HexEncoder encoderKey(new StringSink(hexKey));
    encoderKey.Put(key, sizeof(key));
    encoderKey.MessageEnd();

    HexEncoder encoderIV(new StringSink(hexIV));
    encoderIV.Put(iv, sizeof(iv));
    encoderIV.MessageEnd();

    std::cout << "Key: " << hexKey << std::endl;
    std::cout << "IV: " << hexIV << std::endl;

    EncryptFileAES(filename, encryptedFilename, key, iv);
    DecryptFileAES(encryptedFilename, decryptedFilename, key, iv);
}

int main() {
    std::string filename = "encriptar.txt"; 
    std::string encryptedFilename = "encriptar_encrypted.txt"; 
    std::string decryptedFilename = "encriptar_decrypted.txt"; 

    ProcessEncryptionAES(filename, encryptedFilename, decryptedFilename);

    return 0;
}